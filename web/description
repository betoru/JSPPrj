설명란

1. 출력
url 입력 후 페이지 출력
2. 입력
입력받는 url 호출 후 사용자ui 입력받아 출력페이지

3. GET 방식
헤더에 요청하는 방식
scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]
http(protocol)://domain(host).com/path?parameter1=value1&parameter2=value2... -> url
*번외 uri and url
uri 는 식별주소
url 은 그냥 주소라고 생각하면 될듯
uri는 path를 포함하고 이후 쿼리스트링, 파일확장자 등 정확히 식별할 수 있는 데이터를 포함한 것을 의미
url은 path를 포함하지만 뒤의 정보는 포함하지 않은 대략적인 위치정보만을 표현한 주소


4. POST 방식
Body에 요청하는 방식
get 방식으로 요청을 했을 경우 파라미터(쿼리스트링)이 길어지게 되면
정보의 노출문제나 혹은 요청사항이 길어질 경우 올바르게 동작하지 않을 수 있다.
쿼리스트링 길이의 제한이 있기 때문.
그래서 post 방식을 사용한다.

    *POST 요청시 한글문제*
    기준이 되는 영어, 숫자는 1byte로 구성되어있고
    이외 언어에 대해 byte가 추가되는 형식으로 언어가 구성된다.

    한글은 이때 2byte 형식으로 표현된다. ex) 하이 : 하(2byte) 이(2byte)
    POST 방식으로 요청하게되면 한글을 서버에 보내게되고
    서버는 그것을 기본적으로 1byte로 읽어들이려 한다.
    그래서 UTF-8을 설정하여 2byte로 보냈다하더라도
    서버에서 1byte로 읽어들이게되어 깨지는 현상이 발생한다.
    그러므로 서버에서 2byte로 읽어들일 수 있게 request.setCharacterEncoding("UTF-8")로
    설정해주면 깨지지 않고 정상적으로 출력이 가능하다.

    request parameter : 한글 -> character encoding : utf-8 -> -> response utf-8

5. 서블릿필터

웹서버 <-> WAS(Tomcat)   ---(request )-->  Servlet Container
                        <--(response )--

서블릿 컨테이너에 인코딩을 적용하여 전체를 바꿔버리면 전체에 영향을 주니까
request 와 servlet container 사이에 수문장(?)을 둬서
